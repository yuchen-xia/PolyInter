name: stage2_pp8_sd1__pp8_vn4_pp4_fcooper_opv2v
root_dir: "dataset/train"
validate_dir: "dataset/validate"
test_dir: "dataset/test"


comm_range: 70

yaml_parser: "load_pp_sd_param"
train_params:
  batch_size: &batch_size 2
  epoches: &epoches 35
  eval_freq: 2
  save_freq: 2
  max_cav: &max_cav 5



input_source: ['lidar', 'camera']
label_type: 'lidar'
cav_lidar_range: &cav_lidar [-102.4, -51.2, -3, 102.4, 51.2, 1]

add_data_extension: ['bev_visibility.png']

heter:
  assignment_path: "opencood/logs/heter_modality_assign/opv2v_4modality.json" 
  ego_modality: &ego_modality "m1"
  mapping_dict: &mapping_dict
    m1: m2
    m2: m2
    m3: m2
    m4: m2
  # lidar_channels_dict:
  #   m3: 32
  modality_setting:
    m1:
      sensor_type: &sensor_type_m1 'lidar'
      core_method: &core_method_m1 "point_pillar_encoder"

      # lidar requires preprocess
      preprocess:
        # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
        core_method: 'SpVoxelPreprocessor'
        args:
          voxel_size: &voxel_size [0.8, 0.8, 4]
          max_points_per_voxel: 32
          max_voxel_train: 32000
          max_voxel_test: 70000
        # lidar range for each individual cav.
        cav_lidar_range: *cav_lidar
    m2:
      sensor_type: &sensor_type_m2 'lidar'
      core_method: &core_method_m2 "second_encoder"
      # lidar requires preprocess
      # lidar requires preprocess
      preprocess:
        # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
        core_method: 'SpVoxelPreprocessor'
        args:
          voxel_size: &voxel_size_k [0.1, 0.1, 0.1]
          max_points_per_voxel: 32
          max_voxel_train: 36000
          max_voxel_test: 70000
        # lidar range for each individual cav.
        cav_lidar_range: *cav_lidar


fusion:
  # core_method: 'intermediateheterpair'
  core_method: 'Intermediateheterpairpolyinterstage2'
  dataset: 'opv2v'
  args: 
    proj_first: false
    grid_conf: None # place-holder
    data_aug_conf: None # place-holder

data_augment: # no use in intermediate fusion
  - NAME: random_world_flip
    ALONG_AXIS_LIST: [ 'x' ]

  - NAME: random_world_rotation
    WORLD_ROT_ANGLE: [ -0.78539816, 0.78539816 ]

  - NAME: random_world_scaling
    WORLD_SCALE_RANGE: [ 0.95, 1.05 ]

# anchor box related
postprocess:
  core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
  # core_method: 'VoxelPostprocessor'
  gt_range: *cav_lidar
  anchor_args:
    cav_lidar_range: *cav_lidar
    l: 3.9
    w: 1.6
    h: 1.56
    r: &anchor_yaw [0, 90]
    feature_stride: 2
    num: &anchor_num 2
  target_args:
    pos_threshold: 0.6
    neg_threshold: 0.45
    score_threshold: 0.2
  order: 'hwl' # hwl or lwh
  max_num: 150 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
  nms_thresh: 0.15
  dir_args: &dir_args
    dir_offset: 0.7853
    num_bins: 2
    anchor_yaw: *anchor_yaw

# model related
model:
  core_method: polyinter_stage2
  args:
    pre_train_modules: checkpoints/stage1_pp8_vn4_pp4_fcooper_opv2v_2025_05_02_23_20_04/net_epoch_bestval_at29.pth #一阶段模型文件

    PROJ_QUERY: true
    USE_PRED: true  
    lidar_range: *cav_lidar
    encoder_q:
      core_method: point_pillar_encoder
      saved_pth: opencood/pre_train_modules/point_pillar_xyres8.pth
      sensor_type: *sensor_type_m1
      args:
        voxel_size: *voxel_size
        lidar_range: *cav_lidar
        anchor_number: *anchor_num
        max_cav: 5
        channel: &c_q 256
        featrue_size: &s_q [64, 128]

        pillar_vfe:
          use_norm: true
          with_distance: false
          use_absolute_xyz: true
          num_filters: [64]
          
        point_pillar_scatter:
          num_features: 64

        base_bev_backbone:
          layer_nums: [3, 5]
          layer_strides: [2, 2]
          num_filters: [64, 128]
          upsample_strides: [1, 2]
          num_upsample_filter: [128, 128]

    encoder_k:
      core_method: *core_method_m2
      sensor_type: *sensor_type_m2
      # local_dim: &local_dim_m2 64
      saved_pth: opencood/pre_train_modules/second_xyres1.pth
      
      args:
        batch_size: *batch_size
        voxel_size: *voxel_size_k
        lidar_range: *cav_lidar
        anchor_number: *anchor_num
        channel: &c_k 512
        featrue_size: &s_k [128, 256]
        mean_vfe:
          feature_points: 4
        grid_size: [1408.,  400.,   40.]
        backbone_3d: []

        height_compression:
          feature_num: 256

        base_bev_backbone:
          layer_nums: [5, 5]
          layer_strides: [1, 2]
          num_filters: [128, 256]
          upsample_strides: [1, 2]
          num_upsample_filter: [256, 256]

        point_pillar_scatter:
          num_features: 64

        pillar_vfe:
          use_norm: true
          with_distance: false
          use_absolute_xyz: true
          num_filters: [64]

      backbone_args:
        layer_nums: [3]
        layer_strides: [2]
        num_filters: [64]
        inplanes: 128

      aligner_args:
        core_method: identity

      in_head: 256

      anchor_number: *anchor_num
      dir_args: *dir_args

    compressor_k:
      align_type: MaxPool2d
      in_channel: *c_k
      in_size: *s_k
      featrue_size: *s_q
      channel: *c_q

    transformer:
      num_layers: 1
      num_heads: 16
      d_model: 256
      d_ff: 256

    anchor_num: *anchor_num
    momentum: 0.8

loss:
  core_method: 
    polyinter_stage2_loss
  args:
    pos_cls_weight: 2.0
    cls_weight: 1.0
    reg: 
      codewise: true
      sigma: 3.0
      type: WeightedSmoothL1Loss
      weight: 2.0
    cls:
      alpha: 0.25
      gamma: 2.0
      type: SigmoidFocalLoss
      weight: 1.0


optimizer:
  core_method: Adam
  lr: 0.001
  args:
    eps: 1e-10
    weight_decay: 1e-4

lr_scheduler:
  core_method: multistep #step, multistep and Exponential support
  gamma: 0.1
  step_size: [10, 25]