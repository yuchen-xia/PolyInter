name: stage2_pp8_lift__pp8_resnet_vn4_cobevt_opv2v
root_dir: "dataset/train"
validate_dir: "dataset/validate"
test_dir: "dataset/test"


comm_range: 70

yaml_parser: "load_pp_lift_param"
train_params:
  batch_size: &batch_size 2
  epoches: &epoches 35
  eval_freq: 2
  save_freq: 2
  max_cav: &max_cav 5



input_source: ['lidar', 'camera']
label_type: 'lidar'
cav_lidar_range: &cav_lidar [-102.4, -51.2, -3, 102.4, 51.2, 1]

add_data_extension: ['bev_visibility.png']

heter:
  assignment_path: "opencood/logs/heter_modality_assign/opv2v_4modality.json" 
  ego_modality: &ego_modality "m1"
  mapping_dict: &mapping_dict
    m1: m2
    m2: m2
    m3: m2
    m4: m2
  # lidar_channels_dict:
  #   m3: 32
  modality_setting:
    m1:
      sensor_type: &sensor_type_m1 'lidar'
      core_method: &core_method_m1 "point_pillar"

      # lidar requires preprocess
      preprocess:
        # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
        core_method: 'SpVoxelPreprocessor'
        args:
          voxel_size: &voxel_size [0.8, 0.8, 4]
          max_points_per_voxel: 32
          max_voxel_train: 32000
          max_voxel_test: 70000
        # lidar range for each individual cav.
        cav_lidar_range: *cav_lidar
    m2:
      sensor_type: &sensor_type_m2 'camera'
      core_method: &core_method_m2 "lift_splat_shoot_encoder"

      grid_conf: &grid_conf_m2
        xbound: [-51.2, 51.2, 0.4]   # Limit the range of the x direction and divide the grids
        ybound: [-51.2, 51.2, 0.4]   # Limit the range of the y direction and divide the grids
        zbound: [-10, 10, 20.0]   # Limit the range of the z direction and divide the grids
        ddiscr: [2, 50, 48]
        mode: 'LID'
      data_aug_conf: &data_aug_conf_m2
        resize_lim: [0.65, 0.7]
        final_dim: [384, 512]
        rot_lim: [-3.6, 3.6]
        H: 600
        W: 800
        rand_flip: False
        bot_pct_lim: [0.0, 0.05]
        cams: ['camera0', 'camera1', 'camera2', 'camera3']
        Ncams: 4


fusion:
  # core_method: 'intermediateheterpair'
  core_method: 'Intermediateheterpairpolyinterstage2'
  dataset: 'opv2v'
  args: 
    proj_first: false
    grid_conf: None # place-holder
    data_aug_conf: None # place-holder

data_augment: # no use in intermediate fusion
  - NAME: random_world_flip
    ALONG_AXIS_LIST: [ 'x' ]

  - NAME: random_world_rotation
    WORLD_ROT_ANGLE: [ -0.78539816, 0.78539816 ]

  - NAME: random_world_scaling
    WORLD_SCALE_RANGE: [ 0.95, 1.05 ]

# anchor box related
postprocess:
  core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
  # core_method: 'VoxelPostprocessor'
  gt_range: *cav_lidar
  anchor_args:
    cav_lidar_range: *cav_lidar
    l: 3.9
    w: 1.6
    h: 1.56
    r: &anchor_yaw [0, 90]
    feature_stride: 2
    num: &anchor_num 2
  target_args:
    pos_threshold: 0.6
    neg_threshold: 0.45
    score_threshold: 0.2
  order: 'hwl' # hwl or lwh
  max_num: 150 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
  nms_thresh: 0.15
  dir_args: &dir_args
    dir_offset: 0.7853
    num_bins: 2
    anchor_yaw: *anchor_yaw

# model related
model:
  core_method: polyinter_stage2
  args:
    pre_train_modules: checkpoints/stage1_pp8_resnet_vn4_cobevt_2025_01_25_15_32_34/net_epoch_bestval_at11.pth

    PROJ_QUERY: true
    USE_PRED: true  
    lidar_range: *cav_lidar
    encoder_q:
      core_method: point_pillar_encoder
      saved_pth: opencood/pre_train_modules/point_pillar_xyres8.pth
      sensor_type: *sensor_type_m1
      args:
        voxel_size: *voxel_size
        lidar_range: *cav_lidar
        anchor_number: *anchor_num
        max_cav: 5
        channel: &c_q 256
        featrue_size: &s_q [64, 128]

        pillar_vfe:
          use_norm: true
          with_distance: false
          use_absolute_xyz: true
          num_filters: [64]
          
        point_pillar_scatter:
          num_features: 64

        base_bev_backbone:
          layer_nums: [3, 5]
          layer_strides: [2, 2]
          num_filters: [64, 128]
          upsample_strides: [1, 2]
          num_upsample_filter: [128, 128]

    encoder_k:
      core_method: *core_method_m2
      sensor_type: *sensor_type_m2
      # local_dim: &local_dim_m2 64
      saved_pth: opencood/pre_train_modules/lift_splat_shoot.pth

      args:
        channel: &c_k 128
        anchor_number: *anchor_num
        grid_conf: *grid_conf_m2
        data_aug_conf: *data_aug_conf_m2
        img_downsample: 8
        img_features: *c_k
        bevout_feature: *c_k
        use_depth_gt: false
        depth_supervision: false
        camera_encoder: EfficientNet

      camera_mask_args:
        cav_lidar_range: *cav_lidar
        grid_conf: *grid_conf_m2

      backbone_args:
        layer_nums: [3]
        layer_strides: [2]
        num_filters: [64]
        inplanes: 128

      aligner_args:
        core_method: identity

      in_head: 256

      anchor_number: *anchor_num
      dir_args: *dir_args

    compressor_k:
      align_type: ShrinkandPadding
      shrink_rate: 4
      pad_sequence: [32,32,0,0]
      in_channel: *c_k
      in_size: [256, 256]
      featrue_size: *s_q
      channel: *c_q

    transformer:
      num_layers: 1
      num_heads: 16
      d_model: 256
      d_ff: 256

    fusion_net:
      core_method: cobevt
      input_dim: 256
      mlp_dim: 256
      agent_size: 5
      window_size: 2
      dim_head: 32
      drop_out: 0.1
      depth: 3
      mask: true

    anchor_num: *anchor_num
    momentum: 0.8

loss:
  core_method: 
    polyinter_stage2_loss
  args:
    pos_cls_weight: 2.0
    cls_weight: 1.0
    reg: 
      codewise: true
      sigma: 3.0
      type: WeightedSmoothL1Loss
      weight: 2.0
    cls:
      alpha: 0.25
      gamma: 2.0
      type: SigmoidFocalLoss
      weight: 1.0


optimizer:
  core_method: Adam
  lr: 0.001
  args:
    eps: 1e-10
    weight_decay: 1e-4

lr_scheduler:
  core_method: multistep #step, multistep and Exponential support
  gamma: 0.1
  step_size: [10, 25]